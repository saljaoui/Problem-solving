package main

import (
    "bufio"
    "fmt"
    "io"
    "os"
    "strconv"
    "strings"
)

/*
 * Complete the 'dayOfProgrammer' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts INTEGER year as parameter.
 */

func isLeapJulian(year int32) bool {
    return year % 4 == 0
}

func isLeapGregorian(year int32) bool {
    return (year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)
}

func dayOfProgrammer(year int32) string {
    var day, month int

    if year < 1918 { // Julian calendar
        if isLeapJulian(year) {
            day = 256 - 244 // 256th day minus days till Aug 31st
        } else {
            day = 256 - 243
        }
    } else if year > 1918 { // Gregorian calendar
        if isLeapGregorian(year) {
            day = 256 - 244 // 256th day minus days till Aug 31st
        } else {
            day = 256 - 243
        }
    } else { // 1918, the transition year
        day = 256 - 230 // 256th day minus days till Aug 31st
    }

    month = 9 // September

    return fmt.Sprintf("%02d.%02d.%d", day, month, year)
}

func main() {
    reader := bufio.NewReaderSize(os.Stdin, 16 * 1024 * 1024)

    stdout, err := os.Create(os.Getenv("OUTPUT_PATH"))
    checkError(err)

    defer stdout.Close()

    writer := bufio.NewWriterSize(stdout, 16 * 1024 * 1024)

    yearTemp, err := strconv.ParseInt(strings.TrimSpace(readLine(reader)), 10, 64)
    checkError(err)
    year := int32(yearTemp)

    result := dayOfProgrammer(year)

    fmt.Fprintf(writer, "%s\n", result)

    writer.Flush()
}

func readLine(reader *bufio.Reader) string {
    str, _, err := reader.ReadLine()
    if err == io.EOF {
        return ""
    }

    return strings.TrimRight(string(str), "\r\n")
}

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}
